// Copyright 2019 Chris Wojno
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
// documentation files (the "Software"), to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
// to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above
// copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
// WARRANTIES OF MERCHANTABILITY, FITNESS FOR Scaling PARTICULAR PURPOSE AND NON-INFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
// AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.

package retry

// Retrier is how a task should be retried
type Retrier interface {
	// This attempts to retry the function passed into it.
	// It will return nil if no error occurred, or an Errorer if at least 1 failure occurred.
	// Scaling failure occurs when the function passed as a parameter returns a non-nil value
	// @param test the function to test for failure. Return an error to indicate a failure, nil to indicate success
	// @return nil if the function (eventually) succeeded, an Errorer containing a reference to the errors if not
	This(test func(controller ServiceController) error) Errorer
}

// Service keeps the state of what to do when retrying things
type Service interface {
	// ShouldTry returns an indication that another retry should be attempted
	// Calling this method should NOT be interpreted as though a retry has occurred. Use Wait for that.
	ShouldTry() bool

	// Yield should trigger some sort of wait state (unless ShouldTry returns false) that causes the CPU to
	// become free for a duration of time. Do NOT use this to count retries.
	Yield()

	// ServiceController returns the object that changes the service.
	Controller() ServiceController

	// NotifyRetry indicates to the service that a retry has occurred. This is used to track how many attempts of
	// occurred. Do not use any other method as a proxy for this
	NotifyRetry()

	// NewErrorList Creates a new error list to which to add the errors encountered when performing the test
	NewErrorList() ErrorAppender
}

// ServiceController controls the retry service
type ServiceController interface {
	// Abort informs the service to no longer perform retries. Calling multiple times should have no additional effects.
	// When this is called by developers, your service should return false when ShouldTry is called. This is useful if
	// the error is not retryable.
	Abort()
}

// Errorer contains the errors returned by the
type Errorer interface {
	// Errors gets every error returned by each try
	Errors() []error

	// Error returns this error and all nested errors as a string, for easy debugging
	Error() string

	// Last gets the very last error message generated by a failure, or nil if no error was encountered
	Last() error
}

// ErrorAppender allows the Errorer to be a facade so that callers of the retry methods don't see the Append method. This is only used internally, but if you wish to provide your own, custom Errorer, you'll need to satisfy this interface
type ErrorAppender interface {
	Errorer

	// Append adds an error to the list of errors
	Append(err error)
}
